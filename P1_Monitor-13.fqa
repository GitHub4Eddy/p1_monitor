{"name":"P1 Monitor","type":"com.fibaro.energyMeter","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_280"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Update Devicelist","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_280"}}},"uiCallbacks":[{"callback":"button1Event","eventType":"onReleased","name":"button1"}],"quickAppVariables":[{"name":"IPaddress","value":"192.168.4.1"},{"name":"powerID","value":"0"},{"name":"Interval","value":"10"},{"name":"debugLevel","value":"1"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP P1 MONITOR \n\n-- This Quickapp retrieves power consumption, power production and gas usage from the (P1 Monitor) energy and gas meter \n\n-- Child Devices for Net Consumption, Consumption, Production, Gross Consumption, Device Consumption, Consumption High, Consumption Low, Production High, Production Low, Total Gas, Consumption L1 L2 L3, Ampere L1 L2 L3, Volt L1 L2 L3, Production L1 L2 and L3\n\n-- All power consumption of all HomeCenter devices is summarized\n-- The difference between the total power consumption and the power consumption of the HomeCenter devices is put in a unused device (unless the powerID = 0 or empty)\n\n-- Version 1.3 (13th February 2021)\n   -- Added Child Devices for Voltage L1 L2 L3\n\n-- Version 1.2 (6th February 2021)\n   -- Added a lot of Child Devices for Net Consumption, Consumption, Production, Gross Consumption, Device Consumption, Consumption High, Consumption Low, Production High, Production Low, Total Gas, Consumption L1 L2 L3, Ampere L1 L2 L3, Production L1 L2 and L3\n\n-- Version 1.1 (18th January 2021)\n   -- Solved a bug when powerID = 0\n\n-- Version 1.0 (15th Januari 2021)\n   -- Changed routine te get Energy Device ID's fast (no more maxNodeID needed)\n   -- Added \"Update Devicelist\" button to update the Energy devicelist\n   -- Added Tarifcode High and Low (and empty for flat fee)\n   -- Rounded Consumption and Production to zero digits Watt\n   -- Added Quickapp variable for debug level (1=some, 2=few, 3=all). Recommended default value is 1. \n   -- Re-aranged the labels\n   -- Cleaned up some code\n\n-- Version 0.3 (16th August 2020)\n   -- Added Quickapp variables for easy configuration\n   -- Added Power Production\n   -- Changed method of adding QuickApp variables, so they can be edited\n\n-- Variables (mandatory): \n   -- IPaddress = IP address of your P1 monitor\n   -- Interval = Number in seconds, the P1 Monitor normally is updated every 10 seconds\n   -- powerID = ID of the device where you want to capture the 'delta' power, use 0 if you don't want to store the energy consumption\n   -- debugLevel = Number (1=some, 2=few, 3=all) (default = 1)\n\n-- Tested on:\n   -- P1 Monitor version:202012-1.0.0\n   -- Raspberry Pi model:Raspberry Pi 4 Model B Rev 1.1\n   -- Linux-5.4.72-v7l+-armv7l-with-debian-10.6\n   -- Python versie:3.7.3\n\n-- I use a Smart Meter Cable Starter Kit:\n   -- Raspberry Pi 4 Model B Rev 1.1 2GB\n   -- 8GB Micro SDHC\n   -- Original Raspberry Pi 4B Enclosure\n   -- Original Raspberry Pi USB-C 3A power supply\n   -- Smart Meter cable\n   -- P1 Monitor software from: https://www.ztatz.nl\n\n-- Example content Json table Smartmeter (without values for production)\n   --[{\"CONSUMPTION_GAS_M3\": 6635.825, \"CONSUMPTION_KWH_HIGH\": 9986.186, \"CONSUMPTION_KWH_LOW\": 9170.652, \"CONSUMPTION_W\": 692, \"PRODUCTION_KWH_HIGH\": 0.0, \"PRODUCTION_KWH_LOW\": 0.0, \"PRODUCTION_W\": 0, \"RECORD_IS_PROCESSED\": 0, \"TARIFCODE\": \"D\", \"TIMESTAMP_UTC\": 1601733693, \"TIMESTAMP_lOCAL\": \"2020-10-03 16:01:33\"}]\n\n-- Example content Json table Phase\n   --[{\"CONSUMPTION_L1_W\": 650.0, \"CONSUMPTION_L2_W\": 0.0, \"CONSUMPTION_L3_W\": 0.0, \"L1_A\": 3.0, \"L1_V\": 224.0, \"L2_A\": 0.0, \"L2_V\": 0.0, \"L3_A\": 0.0, \"L3_V\": 0.0, \"PRODUCTION_L1_W\": 0.0, \"PRODUCTION_L2_W\": 0.0, \"PRODUCTION_L3_W\": 0.0, \"TIMESTAMP_UTC\": 1611953641, \"TIMESTAMP_lOCAL\": \"2021-01-29 21:54:01\"}]\n  \n\n-- No editing of this code is needed \n\n\nclass 'net_consumption'(QuickAppChild)\nfunction net_consumption:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"net_consumption QuickappChild initiated, deviceId:\",self.id)\nend\nfunction net_consumption:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.net_consumption)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'consumption'(QuickAppChild)\nfunction consumption:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'production'(QuickAppChild)\nfunction production:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'gross_consumption'(QuickAppChild)\nfunction gross_consumption:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"gross_consumption QuickappChild initiated, deviceId:\",self.id)\nend\nfunction gross_consumption:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.gross_consumption)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'device_consumption'(QuickAppChild)\nfunction device_consumption:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"device_consumption QuickappChild initiated, deviceId:\",self.id)\nend\nfunction device_consumption:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.device_consumption)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'consumption_high'(QuickAppChild)\nfunction consumption_high:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_high QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption_high:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_high)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'consumption_low'(QuickAppChild)\nfunction consumption_low:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_low QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption_low:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_low)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'production_high'(QuickAppChild)\nfunction production_high:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_high QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production_high:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_high)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'production_low'(QuickAppChild)\nfunction production_low:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_low QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production_low:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_low)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'gas'(QuickAppChild)\nfunction gas:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"gas QuickappChild initiated, deviceId:\",self.id)\nend\nfunction gas:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.gas)))\n  self:updateProperty(\"unit\", \"mÂ³\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'consumption_L1'(QuickAppChild)\nfunction consumption_L1:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_L1 QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption_L1:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_L1)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'consumption_L2'(QuickAppChild)\nfunction consumption_L2:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_L2 QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption_L2:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_L2)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'consumption_L3'(QuickAppChild)\nfunction consumption_L3:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_L3 QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption_L3:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_L3)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'L1_A'(QuickAppChild)\nfunction L1_A:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"L1_A QuickappChild initiated, deviceId:\",self.id)\nend\nfunction L1_A:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.L1_A)))\n  self:updateProperty(\"unit\", \"Amp\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'L2_A'(QuickAppChild)\nfunction L2_A:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"L2_A QuickappChild initiated, deviceId:\",self.id)\nend\nfunction L2_A:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.L2_A)))\n  self:updateProperty(\"unit\", \"Amp\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'L3_A'(QuickAppChild)\nfunction L3_A:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"L3_A QuickappChild initiated, deviceId:\",self.id)\nend\nfunction L3_A:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.L3_A)))\n  self:updateProperty(\"unit\", \"Amp\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'L1_V'(QuickAppChild)\nfunction L1_V:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"L1_V QuickappChild initiated, deviceId:\",self.id)\nend\nfunction L1_V:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.L1_V)))\n  self:updateProperty(\"unit\", \"Volt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'L2_V'(QuickAppChild)\nfunction L2_V:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"L2_V QuickappChild initiated, deviceId:\",self.id)\nend\nfunction L2_V:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.L2_V)))\n  self:updateProperty(\"unit\", \"Volt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'L3_V'(QuickAppChild)\nfunction L3_V:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"L3_V QuickappChild initiated, deviceId:\",self.id)\nend\nfunction L3_V:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.L3_V)))\n  self:updateProperty(\"unit\", \"Volt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'production_L1'(QuickAppChild)\nfunction production_L1:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_L1 QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production_L1:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_L1)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'production_L2'(QuickAppChild)\nfunction production_L2:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_L2 QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production_L2:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_L2)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'production_L3'(QuickAppChild)\nfunction production_L3:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_L3 QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production_L3:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_L3)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp Functions\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:button1Event() -- Refresh button event\n  self:updateView(\"button1\", \"text\", \"Please wait...\")\n  self:eDevices() -- Get all Energy Devices\n  --self:getData() -- Go to getData\n  fibaro.setTimeout(5000, function()\n    self:updateView(\"button1\", \"text\", \"Update Devicelist\")\n  end)\nend\n\n\nfunction QuickApp:consumption() -- Update the energy consumption of all energy devices\n  local deviceValue = 0\n  local id = 1\n  data.device_consumption = 0\n  data.gross_consumption = 0\n  for key, id in pairs(eDevices) do\n    if fibaro.getValue(id, \"power\") and id~=powerID then\n      deviceValue = fibaro.getValue(id, \"power\")\n      --self:logging(3,fibaro.getName(id) ..\" (ID \" ..id ..\"): \" ..deviceValue ..\" Watt\")\n      data.device_consumption = data.device_consumption + deviceValue\n    end\n  end\n  data.gross_consumption = tonumber(data.net_consumption) - data.device_consumption -- Measured power usage minus power usage from all devices\n  if powerID == 0 or powerID == nil then\n    --self:warning(\"No powerID to store net power consumption\")\n  else\n    api.put(\"/devices/\"..powerID, {[\"properties\"]={[\"power\"]=data.gross_consumption}}) -- Put gross_consumption into device with powerID\n  end\nend\n\n\nfunction QuickApp:valuesPhase() -- Get the values from json file Phase\n  self:logging(3,\"valuesPhase\")\n  data.consumption_L1 = string.format(\"%.1f\",jsonTable.CONSUMPTION_L1_W)\n  data.consumption_L2 = string.format(\"%.1f\",jsonTable.CONSUMPTION_L2_W)\n  data.consumption_L3 = string.format(\"%.1f\",jsonTable.CONSUMPTION_L3_W)\n  data.L1_A = string.format(\"%.1f\",jsonTable.L1_A)\n  data.L2_A = string.format(\"%.1f\",jsonTable.L2_A)\n  data.L3_A = string.format(\"%.1f\",jsonTable.L3_A)\n  data.L1_V = string.format(\"%.1f\",jsonTable.L1_V)\n  data.L2_V = string.format(\"%.1f\",jsonTable.L2_V)\n  data.L3_V = string.format(\"%.1f\",jsonTable.L3_V)  data.production_L1 = string.format(\"%.1f\",jsonTable.PRODUCTION_L1_W)\n  data.production_L2 = string.format(\"%.1f\",jsonTable.PRODUCTION_L2_W)\n  data.production_L3 = string.format(\"%.1f\",jsonTable.PRODUCTION_L3_W)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  local labelText = \"\"\n  labelText = labelText ..\"Net consumption: \" ..data.net_consumption ..\" Watt \" ..data.tarifcodeText ..\"\\n\"\n  labelText = labelText ..\"Consumption: \" ..data.consumption ..\" Watt\" ..\"\\n\" \n  labelText = labelText ..\"Production: \" ..data.production ..\" Watt\" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Gross consumption: \" ..data.gross_consumption ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Device consumption: \" ..data.device_consumption ..\" Watt\" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Totals:\" ..\"\\n\" \n  labelText = labelText ..\"Consumption high: \" ..data.consumption_high ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Consumption low: \" ..data.consumption_low ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Consumption: \" ..data.total_consumption ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Production high: \" ..data.production_high ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Producton low: \" ..data.production_low ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Production: \" ..data.total_production ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Gas: \" ..data.gas ..\" mÂ³\" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Consumption:\" ..\"\\n\"\n  labelText = labelText ..\"L1: \" ..data.consumption_L1 ..\" - L2: \" ..data.consumption_L2 ..\" - L3: \" ..data.consumption_L3 ..\" Watt \" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Ampere:\" ..\"\\n\"\n  labelText = labelText ..\"L1: \" ..data.L1_A ..\" - L2: \" ..data.L2_A ..\" - L3: \" ..data.L3_A ..\" Amp \" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Voltage:\" ..\"\\n\"\n  labelText = labelText ..\"L1: \" ..data.L1_V ..\" - L2: \" ..data.L2_V ..\" - L3: \" ..data.L3_V ..\" Volt \" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Production\" ..\"\\n\"\n  labelText = labelText ..\"L1: \" ..data.production_L1 ..\" - L2: \" ..data.production_L2 ..\" - L3: \" ..data.production_L3 ..\" Watt \" ..\"\\n\"\n\n  self:updateView(\"label1\", \"text\", labelText)\n  self:updateProperty(\"log\", \"\")\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:valuesSmartmeter() -- Get the values from json file Smartmeter\n  data.consumption = string.format(\"%.1f\",jsonTable.CONSUMPTION_W)\n  data.consumption_high = string.format(\"%.3f\",jsonTable.CONSUMPTION_KWH_HIGH)\n  data.consumption_low = string.format(\"%.3f\",jsonTable.CONSUMPTION_KWH_LOW)\n  data.production = string.format(\"%.1f\",jsonTable.PRODUCTION_W)\n  data.production_high = string.format(\"%.3f\",jsonTable.PRODUCTION_KWH_HIGH)\n  data.production_low = string.format(\"%.3f\",jsonTable.PRODUCTION_KWH_LOW)\n  data.gas = string.format(\"%.3f\",jsonTable.CONSUMPTION_GAS_M3)\n  data.net_consumption = string.format(\"%.1f\",jsonTable.CONSUMPTION_W - jsonTable.PRODUCTION_W)\n  data.total_consumption = string.format(\"%.3f\",(jsonTable.CONSUMPTION_KWH_HIGH + jsonTable.CONSUMPTION_KWH_LOW))\n  data.total_production = string.format(\"%.3f\",(jsonTable.PRODUCTION_KWH_HIGH + jsonTable.PRODUCTION_KWH_LOW))\n  data.tarifcode = jsonTable.TARIFCODE\n\n  if data.tarifcode == \"P\" then\n    data.tarifcodeText = \"(High)\"\n  elseif data.tarifcode == \"D\" then\n    data.tarifcodeText = \"(Low)\"\n  else\n    data.tarifcodeText = \"\"\n  end\nend\n\n\nfunction QuickApp:getData() -- Get data from P1 Monitor \n  local url = \"http://\" ..IPaddress ..Path\n  self:logging(3,\"url: \" ..url)\n  self.http:request(url, {\n  options = {\n    headers = {Accept = \"application/json\"}, method = 'GET'},\n    success = function(response)\n      self:logging(3,\"Response status: \" ..response.status)\n      self:logging(3,\"Response data: \" ..response.data)\n\n      local apiResult = response.data        \n      apiResult = apiResult:gsub(\"%[\", \"\") -- clean up the apiResult by removing [\n      apiResult = apiResult:gsub(\"%]\", \"\") -- clean up the apiResult by removing [\n      jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table\n\n      self:logging(3,\"Mode prev: \" ..Mode)\n      if Mode == \"Smartmeter\" then\n        self:valuesSmartmeter() -- Get the values from json file Smartmeter\n        self:consumption() -- Store net consumption in unused device \n        Path = pathPhase\n        Mode = \"Phase\"\n      else\n        self:valuesPhase() -- Get the values from json file Phase\n        Path = pathSmartmeter\n        Mode = \"Smartmeter\"\n      end\n      self:logging(3,\"Mode next: \" ..Mode)\n\n      self:updateLabels() -- Update the labels\n      self:updateChildDevices() -- Update the Child Devices\n\n    end,\n    error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n  }) \n  fibaro.setTimeout((Interval/2)*1000, function() -- Checks every [Interval] seconds for new data (two loops)\n    self:getData()\n  end)\nend \n\n\nfunction QuickApp:eDevices() -- Get all Device IDs which measure Energy Consumption\n  eDevices = {}\n  local devices, status = api.get(\"/devices?interface=energy\")\n  self:trace(\"Updated devicelist devices with energy consumption\")\n  for k in pairs(devices) do\n    table.insert(eDevices,devices[k].id)\n  end\n  self:logging(2,\"Energy Devices: \" ..json.encode(eDevices))\nend\n\n\n\nfunction QuickApp:createVariables() -- Get all Quickapp Variables or create them\n  pathSmartmeter = \"/api/v1/smartmeter?limit=1&json=object\" -- Default path Smartmeter\n  pathPhase = \"/api/v1/phase?limit=1&json=object\" -- Default path Phase\n  Path = pathSmartmeter -- Set initial value\n  Mode = \"Smartmeter\" -- Set initial value\n  data = {}\n  data.consumption_L1 = \"0\" \n  data.consumption_L2 = \"0\" \n  data.consumption_L3 = \"0\" \n  data.L1_A = \"0\" \n  data.L2_A = \"0\" \n  data.L3_A = \"0\"   \n  data.L1_V = \"0\" \n  data.L2_V = \"0\" \n  data.L3_V = \"0\" \n  data.production_L1 = \"0\" \n  data.production_L2 = \"0\" \n  data.production_L3 = \"0\" \n  data.device_consumption = 0\n  data.gross_consumption = 0\nend\n\n\nfunction QuickApp:getQuickappVariables() -- Get all Quickapp Variables or create them\n  IPaddress = self:getVariable(\"IPaddress\")\n  powerID = tonumber(self:getVariable(\"powerID\"))\n  Interval = tonumber(self:getVariable(\"Interval\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n\n  -- Check existence of the mandatory variables, if not, create them with default values \n  if IPaddress == \"\" or IPaddress == nil then \n    IPaddress = \"192.168.1.120\" -- Default IPaddress \n    self:setVariable(\"IPaddress\", IPaddress)\n    self:trace(\"Added QuickApp variable IPaddress\")\n  end\n  if powerID == \"\" or powerID == nil then \n    powerID = \"0\" -- ID of the device where you want to capture the 'delta' power, use 0 if you don't want to store the energy consumption\n    self:setVariable(\"powerID\", powerID)\n    self:trace(\"Added QuickApp variable powerID\")\n    powerID = tonumber(powerID)\n  end\n  if Interval == \"\" or Interval == nil then\n    Interval = \"10\" -- Default interval in seconds (The P1 meter normally reads every 10 seconds)\n    self:setVariable(\"Interval\", Interval)\n    self:trace(\"Added QuickApp variable Interval\")\n    Interval = tonumber(Interval)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel response in seconds\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if powerID == 0 or powerID == nil then\n    self:warning(\"No powerID to store net power consumption\")\n  end\nend\n\n\n\nfunction QuickApp:updateChildDevices()\n  for id,child in pairs(self.childDevices) do -- Update Child Devices\n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:setupChildDevices() -- Setup Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"net_consumption\", name=\"Net Consumption\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"consumption\", name=\"Consumption\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"production\", name=\"Production\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"gross_consumption\", name=\"Gross Consumption\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"device_consumption\", name=\"Device Consumption\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"consumption_high\", name=\"Consumption High\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"kWh\"},\n      {className=\"consumption_low\", name=\"Consumption Low\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"kWh\"},\n      {className=\"production_high\", name=\"Production High\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"kWh\"},\n      {className=\"production_low\", name=\"Production Low\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"kWh\"},\n      {className=\"gas\", name=\"Total Gas\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"mÂ³\"},\n      {className=\"consumption_L1\", name=\"Consumption L1\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"consumption_L2\", name=\"Consumption L2\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"consumption_L3\", name=\"Consumption L3\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"L1_A\", name=\"Ampere L1\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Amp\"},\n      {className=\"L2_A\", name=\"Ampere L2\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Amp\"},\n      {className=\"L3_A\", name=\"Ampere L3\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Amp\"},\n      {className=\"L1_V\", name=\"Voltage L1\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Volt\"},\n      {className=\"L2_V\", name=\"Voltage L2\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Volt\"},\n      {className=\"L3_V\", name=\"Voltage L3\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Volt\"},\n      {className=\"production_L1\", name=\"Production L1\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"production_L2\", name=\"Production L2\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n      {className=\"production_L3\", name=\"Production L3\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"Watt\"},\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n    __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n    self.http = net.HTTPClient({timeout=3000})\n    self:debug(\"onInit\")\n    self:setupChildDevices() -- Setup the Child Devices\n    self:getQuickappVariables() -- Get Quickapp Variables or create them\n    self:createVariables() -- Create Variables\n    self:eDevices() -- Get all Energy Devices\n    self:getData() -- Go to getData\nend\n\n-- EOF"}]}