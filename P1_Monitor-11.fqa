{"name":"P1 Monitor","type":"com.fibaro.energyMeter","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_280"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Update Devicelist","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_280"}}},"uiCallbacks":[{"callback":"button1Event","eventType":"onReleased","name":"button1"}],"quickAppVariables":[{"name":"IPaddress","value":"192.168.1.120"},{"name":"Path","value":"/api/v1/smartmeter?limit=1&json=object"},{"name":"powerID","value":"57"},{"name":"Interval","value":"10"},{"name":"debugLevel","value":"1"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP P1 MONITOR \n\n-- This Quickapp retrieves power consumption, power production and gas usage from the (P1 Monitor) energy and gas meter \n-- All power consumption of all HomeCenter devices is summarized\n-- The difference between the total power consumption and the power consumption of the HomeCenter devices is put in a unused device (unless the powerID = 0 or empty)\n-- In the QuickApp labels power consumption, power production and gas usage is shown \n-- The net consumption is also shown in de log (under the icon)\n\n\n-- Version 1.1 (18th January 2021)\n   -- Solved a bug when powerID = 0\n\n-- Version 1.0 (15th Januari 2021)\n   -- Changed routine te get Energy Device ID's fast (no more maxNodeID needed)\n   -- Added \"Update Devicelist\" button to update the Energy devicelist\n   -- Added Tarifcode High and Low (and empty for flat fee)\n   -- Rounded Consumption and Production to zero digits Watt\n   -- Added Quickapp variable for debug level (1=some, 2=few, 3=all). Recommended default value is 1. \n   -- Re-aranged the labels\n   -- Cleaned up some code\n\n-- Version 0.3 (16th August 2020)\n   -- Added Quickapp variables for easy configuration\n   -- Added Power Production\n   -- Changed method of adding QuickApp variables, so they can be edited\n\n-- Variables (mandatory): \n   -- IPaddress = IP address of your P1 monitor\n   -- Path = Path behind the IP address, normally /api/v1/smartmeter?limit=1&json=object\n   -- Interval = Number in seconds, the P1 Monitor normally is updated every 10 seconds\n   -- powerID = ID of the device where you want to capture the 'delta' power, use 0 if you don't want to store the energy consumption\n   -- debugLevel = Number (1=some, 2=few, 3=all) (default = 1)\n\n-- I use a Smart Meter Cable Starter Kit:\n   -- Raspberry Pi 4 Model B Rev 1.1 2GB\n   -- 8GB Micro SDHC\n   -- Original Raspberry Pi 4B Enclosure\n   -- Original Raspberry Pi USB-C 3A power supply\n   -- Smart Meter cable\n   -- P1 Monitor software from: https://www.ztatz.nl\n\n-- Example content Json table (without values for production)\n   --[{\"CONSUMPTION_GAS_M3\": 6635.825, \"CONSUMPTION_KWH_HIGH\": 9986.186, \"CONSUMPTION_KWH_LOW\": 9170.652, \"CONSUMPTION_W\": 692, \"PRODUCTION_KWH_HIGH\": 0.0, \"PRODUCTION_KWH_LOW\": 0.0, \"PRODUCTION_W\": 0, \"RECORD_IS_PROCESSED\": 0, \"TARIFCODE\": \"D\", \"TIMESTAMP_UTC\": 1601733693, \"TIMESTAMP_lOCAL\": \"2020-10-03 16:01:33\"}]\n\n\n-- No editing of this code is needed \n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:button1Event() -- Refresh button event\n  self:updateView(\"button1\", \"text\", \"Please wait...\")\n  self:onInit()\n  fibaro.setTimeout(3000, function()\n    self:updateView(\"button1\", \"text\", \"Update Devicelist\")\n  end)\nend\n\n\nfunction QuickApp:updateConsumption() -- Update the energy consumption of all energy devices\n  local deviceValue = 0\n  local id = 1\n  device_consumption = 0\n  gross_consumption = 0\n  for key, id in pairs(eDevices) do\n    if fibaro.getValue(id, \"power\") and id~=powerID then\n      deviceValue = fibaro.getValue(id, \"power\")\n      self:logging(3,fibaro.getName(id) ..\" (ID \" ..id ..\"): \" ..deviceValue ..\" Watt\")\n      device_consumption = device_consumption + deviceValue\n    end\n  end\n  gross_consumption = tonumber(net_consumption) - device_consumption -- Measured power usage minus power usage from all devices\n  if powerID == 0 or powerID == nil then\n    --self:warning(\"No powerID to store net power consumption\")\n  else\n    api.put(\"/devices/\"..powerID, {[\"properties\"]={[\"power\"]=gross_consumption}}) -- Put gross_consumption into device with powerID\n  end\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:updateProperty(\"log\", \"Net: \" ..net_consumption ..\"W \" ..tarifcodeText)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  local labelText = \"Net consumption: \" ..net_consumption ..\" Watt \" ..tarifcodeText ..\"\\n\\n\"\n  labelText = labelText ..\"Consumption: \" ..consumption ..\" Watt\" ..\"\\n\" \n  labelText = labelText ..\"Production: \" ..production ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Net consumption: \" ..net_consumption ..\" Watt \" ..\"\\n\\n\"\n  labelText = labelText ..\"Gross consumption: \" ..gross_consumption ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Device consumption: \" ..device_consumption ..\" Watt\" ..\"\\n\\n\"\n  labelText = labelText ..\"Total consumption high: \" ..consumption_high ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Total consumption low: \" ..consumption_low ..\" kWh\" ..\"\\n\"\n  labelText = labelText .. \"Total consumption: \" ..total_consumption ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Total production high: \" ..production_high ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Total producton low: \" ..production_low ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Total production: \" ..total_production ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Total gas: \" ..gas ..\" M3\"\n\n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:getValues() -- Get the values from json file\n  consumption = string.format(\"%.1f\",jsonTable.CONSUMPTION_W)\n  consumption_high = string.format(\"%.3f\",jsonTable.CONSUMPTION_KWH_HIGH)\n  consumption_low = string.format(\"%.3f\",jsonTable.CONSUMPTION_KWH_LOW)\n  production = string.format(\"%.1f\",jsonTable.PRODUCTION_W)\n  production_high = string.format(\"%.3f\",jsonTable.PRODUCTION_KWH_HIGH)\n  production_low = string.format(\"%.3f\",jsonTable.PRODUCTION_KWH_LOW)\n  gas = string.format(\"%.3f\",jsonTable.CONSUMPTION_GAS_M3)\n  net_consumption = string.format(\"%.1f\",jsonTable.CONSUMPTION_W - jsonTable.PRODUCTION_W)\n  total_consumption = string.format(\"%.3f\",(jsonTable.CONSUMPTION_KWH_HIGH + jsonTable.CONSUMPTION_KWH_LOW))\n  total_production = string.format(\"%.3f\",(jsonTable.PRODUCTION_KWH_HIGH + jsonTable.PRODUCTION_KWH_LOW))\n  tarifcode = jsonTable.TARIFCODE\n\n  if tarifcode == \"P\" then\n    tarifcodeText = \"(High)\"\n  elseif tarifcode == \"D\" then\n    tarifcodeText = \"(Low)\"\n  else\n    tarifcodeText = \"\"\n  end\nend\n\n\nfunction QuickApp:getData() -- Get data from P1 Monitor\n  local url = \"http://\" ..IPaddress ..Path\n  self.http:request(url, {\n    options={\n    headers = {Accept = \"application/json\"}, method = 'GET'},\n      success = function(response)\n        self:logging(3,\"response status:\" ..response.status)\n\n        local apiResult = response.data\n        apiResult = apiResult:gsub(\"%[\", \"\") -- clean up the apiResult by removing [\n        apiResult = apiResult:gsub(\"%]\", \"\") -- clean up the apiResult by removing [\n        self:logging(3,\"apiResult\" ..apiResult)\n            \n        jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table\n\n        self:getValues() -- Get the values from json file\n        self:updateConsumption() -- Store net consumption in unused device\n        self:updateLabels() -- Update the labels\n        self:updateProperties() -- Update the properties\n\n      end,\n      error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n    }) \n    fibaro.setTimeout(Interval*1000, function() -- Checks every [Interval] seconds for new data\n    self:getData()\n  end)\nend \n\n\nfunction QuickApp:geteDevices() -- Get all Device IDs which measure Energy Consumption\n  eDevices = {}\n  local devices, status = api.get(\"/devices?interface=energy\")\n  self:trace(\"Updated devicelist devices with energy consumption\")\n  for k in pairs(devices) do\n    table.insert(eDevices,devices[k].id)\n  end\n  self:logging(2,\"Energy Devices: \" ..json.encode(eDevices))\nend\n\n\nfunction QuickApp:getGlobals() -- Get all Global Variables or create them\n  IPaddress = self:getVariable(\"IPaddress\")\n  Path = self:getVariable(\"Path\")\n  powerID = tonumber(self:getVariable(\"powerID\"))\n  Interval = tonumber(self:getVariable(\"Interval\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n\n  -- Check existence of the mandatory variables, if not, create them with default values \n  if IPaddress == \"\" or IPaddress == nil then \n    IPaddress = \"192.168.1.120\" -- Default IPaddress \n    self:setVariable(\"IPaddress\", IPaddress)\n    self:trace(\"Added QuickApp variable IPaddress\")\n  end\n  if Path == \"\" or Path == nil then \n    Path = \"/api/v1/smartmeter?limit=1&json=object\" -- Default path\n    self:setVariable(\"Path\", Path)\n    self:trace(\"Added QuickApp variable Path\")\n  end\n  if powerID == \"\" or powerID == nil then \n    powerID = \"0\" -- ID of the device where you want to capture the 'delta' power, use 0 if you don't want to store the energy consumption\n    self:setVariable(\"powerID\", powerID)\n    self:trace(\"Added QuickApp variable powerID\")\n    powerID = tonumber(powerID)\n  end\n  if Interval == \"\" or Interval == nil then\n    Interval = \"10\" -- Default interval in seconds (The P1 meter normally reads every 10 seconds)\n    self:setVariable(\"Interval\", Interval)\n    self:trace(\"Added QuickApp variable Interval\")\n    Interval = tonumber(Interval)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel response in seconds\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if powerID == 0 or powerID == nil then\n    self:warning(\"No powerID to store net power consumption\")\n  end\nend\n\n\nfunction QuickApp:onInit()\n    __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n    self.http = net.HTTPClient({timeout=3000})\n    self:debug(\"onInit\")\n    self:getGlobals() -- Get Global Variables\n    self:geteDevices() -- Get all Energy Devices\n    self:getData() -- Get data from P1 Monitor\nend\n\n-- EOF"}]}