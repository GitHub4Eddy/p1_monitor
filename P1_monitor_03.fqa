{"name":"P1 monitor","type":"com.fibaro.energyMeter","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_280"},"sections":{"items":[{"components":[{"name":"label0","style":{"weight":"1.2"},"text":"P1 Monitor","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label3","style":{"weight":"1.2"},"text":"Label3","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label2","style":{"weight":"1.2"},"text":"Label2","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label5","style":{"weight":"1.2"},"text":"Label5","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label6","style":{"weight":"1.2"},"text":"Label6","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label7","style":{"weight":"1.2"},"text":"Label7","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label8","style":{"weight":"1.2"},"text":"Label8","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label4","style":{"weight":"1.2"},"text":"Label4","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_280"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"IPaddress","value":"192.168.1.120"},{"name":"Path","value":"/api/v1/smartmeter?limit=1&json=object"},{"name":"powerID","value":"57"},{"name":"maxNodeID","value":"350"},{"name":"Interval","value":"9"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP P1 MONITOR \n\n-- This Quickapp retrieves power consumption, power production and gas usage from the (P1 Monitor) energy and gas meter \n-- All power consumption of all HomeCenter devices is summerized\n-- The difference between the total power consumption and the power consumption of the HomeCenter devices is put in a unused device (unless the powerID = 0 or empty)\n-- In the QuickApp labels power consumption, power production and gas usage is shown \n-- The netto consumption is also shown in de log (under the icon)\n\n-- Version 0.3 (16th August 2020)\n-- Added Quickapp variables for easy configuration\n-- Added power production\n-- Changed method of adding QuickApp variables, so they can be edited\n-- I use a Smart Meter Cable Starter Kit:\n-- Raspberry Pi 4 2GB\n-- 8GB Micro SDHC\n-- Original Raspberry Pi 4B Enclosure\n-- Original Raspberry Pi USB-C 3A power supply\n\n-- With the P1 Monitor configuration from: https://www.ztatz.nl\n\n-- Example content Json table (Without production)\n-- {\"CONSUMPTION_GAS_M3\": 6539.998, \"CONSUMPTION_KWH_HIGH\": 9549.688, \"CONSUMPTION_KWH_LOW\": 8735.424, \"CONSUMPTION_W\": 704, \"PRODUCTION_KWH_HIGH\": 0.0, \"PRODUCTION_KWH_LOW\": 0.0, \"PRODUCTION_W\": 0, \"RECORD_IS_PROCESSED\": 0, \"TARIFCODE\": \"P\", \"TIMESTAMP_UTC\": 1597135675, \"TIMESTAMP_lOCAL\": \"2020-08-11 10:47:55\"}\n\nfunction QuickApp:onInit()\n    __TAG = \"P1_MONITOR_\"..self.id\n    self.http = net.HTTPClient({timeout=3000})\n    self:debug(\"onInit\")\n\n    IPaddress = self:getVariable(\"IPaddress\")\n    Path = self:getVariable(\"Path\")\n    powerID = tonumber(self:getVariable(\"powerID\"))\n    maxNodeID = tonumber(self:getVariable(\"maxNodeID\"))\n    Interval = tonumber(self:getVariable(\"Interval\")) \n\n    -- Check existence of the mandatory variables, if not, create them with default values \n    if IPaddress == \"\" or IPaddress == nil then \n      IPaddress = \"192.168.1.120\" -- Default IPaddress \n      self:setVariable(\"IPaddress\", IPaddress)\n      self:trace(\"Added QuickApp variable IPaddress\")\n    end\n    if Path == \"\" or Path == nil then \n      Path = \"/api/v1/smartmeter?limit=1&json=object\" -- Default path\n      self:setVariable(\"Path\", Path)\n      self:trace(\"Added QuickApp variable Path\")\n    end\n    if powerID == \"\" or powerID == nil then \n      powerID = \"57\" -- ID of the device where you want to capture the 'delta' power, use 0 if you don't want the storage\n      self:setVariable(\"powerID\", powerID)\n      self:trace(\"Added QuickApp variable powerID\")\n      powerID = tonumber(powerID)\n    end\n    if maxNodeID == \"\" or maxNodeID == nil then \n      maxNodeID = \"350\" -- maximum node ID in your z-wave network (uses to summerize power consumption of your devices)\n      self:setVariable(\"maxNodeID\", maxNodeID)\n      self:trace(\"Added QuickApp variable maxNodeID\")\n      maxNodeID = tonumber(maxNodeID)\n    end\n    if Interval == \"\" or Interval == nil then\n      Interval = \"9\" -- Default interval in seconds (The P1 meter normally reads every 10 seconds)\n      self:setVariable(\"Interval\", Interval)\n      self:trace(\"Added QuickApp variable Interval\")\n      Interval = tonumber(Interval)\n    end\n\n    if powerID == 0 or powerID == nil then\n      self:warning(\"No powerID to store netto power consumption\")\n    end\n\n    self:loop(\"\")\nend\n\nfunction QuickApp:loop(text)\n\n  local url = \"http://\" ..IPaddress ..Path\n\n  --self:debug(\"-------------- P1 MONITOR --------------\")\n    \n  self.http:request(url, {\n    options={\n    headers = {Accept = \"application/json\"}, method = 'GET'},\n      success = function(response)\n        --self:debug(\"response status:\", response.status) \n        --self:debug(\"headers:\", response.headers[\"Content-Type\"]) \n\n        local apiResult = response.data\n        apiResult = apiResult:gsub(\"%[\", \"\") -- clean up the apiResult by removing [\n        apiResult = apiResult:gsub(\"%]\", \"\") -- clean up the apiResult by removing [\n        --self:debug(\"apiResult\",apiResult)\n            \n        local jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table\n        --self:debug(\"jsonTable\",jsonTable)\n\n        -- Get the values\n        local act_consumption = string.format(\"%.2f\",jsonTable.CONSUMPTION_W)\n        local act_consumption_high = string.format(\"%.2f\",jsonTable.CONSUMPTION_KWH_HIGH)\n        local act_consumption_low = string.format(\"%.2f\",jsonTable.CONSUMPTION_KWH_LOW)\n        local act_production = string.format(\"%.2f\",jsonTable.PRODUCTION_W)\n        local act_production_high = string.format(\"%.2f\",jsonTable.PRODUCTION_KWH_HIGH)\n        local act_production_low = string.format(\"%.2f\",jsonTable.PRODUCTION_KWH_LOW)\n        local act_gas = string.format(\"%.2f\",jsonTable.CONSUMPTION_GAS_M3)\n        local netto_consumption = string.format(\"%.2f\",jsonTable.CONSUMPTION_W - jsonTable.PRODUCTION_W)\n        local total_consumption = string.format(\"%.2f\",(jsonTable.CONSUMPTION_KWH_HIGH + jsonTable.CONSUMPTION_KWH_LOW))\n        local total_production = string.format(\"%.2f\",(jsonTable.PRODUCTION_KWH_HIGH + jsonTable.PRODUCTION_KWH_LOW))\n     \n        -- Debug messages\n        --self:debug(\"Netto consumption: \",netto_consumption ..\" Watt\")\n        --self:debug(\"Actual consumption high: \",act_consumption_high .. \" kWh\")\n        --self:debug(\"Actual consumption low: \",act_consumption_low ..\" kWh\")\n        --self:debug(\"Total consumption: \",total_consumption ..\" kW\")\n        --self:debug(\"Actual production high: \",act_production_high ..\" kWh\")\n        --self:debug(\"Actual production low: \",act_production_low ..\" kWh\")\n        --self:debug(\"Total production: \",total_production ..\" kW\")\n        --self:debug(\"Actual gas: \",act_gas ..\" M3\")\n\n        -- Update the labels\n        self:updateView(\"label1\", \"text\", \"Netto consumption: \" ..netto_consumption ..\" Watt\")\n        self:updateView(\"label2\", \"text\", \"Actual consumption high: \" ..act_consumption_high ..\" kWh\") \n        self:updateView(\"label3\", \"text\", \"Actual consumption low: \" ..act_consumption_low ..\" kWh\")\n        self:updateView(\"label4\", \"text\", \"Actual gas: \" ..act_gas ..\" M3\")\n        self:updateView(\"label5\", \"text\", \"Total consumption: \" ..total_consumption ..\" kW\")\n        self:updateView(\"label6\", \"text\", \"Actual production high: \" ..act_production_high ..\" kWh\") \n        self:updateView(\"label7\", \"text\", \"Actual producton low: \" ..act_production_low ..\" kWh\") \n        self:updateView(\"label8\", \"text\", \"Total production: \" ..total_production ..\" kW\")\n\n        -- Update the property\n        self:updateProperty(\"log\", \"Netto: \" ..netto_consumption ..\" Watt\")\n\n        -- Store netto consumption in unused device\n        local i = 0\n        local total_devices = 0\n        local deviceValue = 0\n        local delta_power = 0\n        if powerID == 0 or powerID == nil then\n          --self:debug(\"No powerID to store netto power consumption\")\n        else\n          for i = 0, maxNodeID do -- Collect the used power of all devices up till maxNodeID\n            if fibaro.getValue(i, \"power\") and i~=powerID then\n              deviceValue = fibaro.getValue(i, \"power\")\n              total_devices = total_devices + deviceValue\n            end\n          end\n          --self:debug(\"netto consumption\", netto_consumption)\n          delta_power = tonumber(netto_consumption) - total_devices -- Measured power usage minus power usage from all devices\n          --self:debug(\"Delta power: \",delta_power ..\" Watt\")\n          api.put(\"/devices/\"..powerID, {[\"properties\"]={[\"power\"]=delta_power}}) -- Put delta power into device with powerID\n        end\n\n      end,\n      error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n    }) \n    fibaro.setTimeout(Interval*1000, function() -- Checks every n seconds for new data\n    self:loop(text)\n  end)\nend "}]}